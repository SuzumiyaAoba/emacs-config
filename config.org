#+TITLE: Emacs Configuration

* early-init.el

** Inhibit

#+begin_src emacs-lisp :tangle early-init.el
(setq inhibit-splash-screen t)
(setq frame-inhibit-implied-resize t)
(setq inhibit-compacting-font-caches t)
#+end_src

** I/O

#+begin_src emacs-lisp :tangle early-init.el
(when (boundp 'read-process-output-max)
  ;; 1MB in bytes, default 4096 bytes
  (setq read-process-output-max 1048576))
#+end_src

** Frame

#+begin_src emacs-lisp :tangle early-init.el
(push '(vertical-scroll-bars) default-frame-alist)
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
#+end_src

** Fonts

#+begin_src emacs-lisp :tangle early-init.el
(set-face-attribute 'default nil :family "Cascadia Next JP" :height 145)
(set-face-attribute 'default nil :family "Cascadia Code NF" :height 145)
#+end_src

* init.el

** Header

文字コードを UTF-8 に設定し、レキシカルバインディングを有効にする。

#+begin_src emacs-lisp :tangle init.el
;; init.el --- SuzumiyaAoba's init.el -*- lexical-binding: t; coding: utf-8 -*-
#+end_src

** Garbage collection

Emacs 起動時に GC が走らないように設定する。
=init.el= の最後に閾値を設定し直す。

#+begin_src emacs-lisp :tangle early-init.el
(setq gc-cons-threshold most-positive-fixnum)
(setq garbage-collection-messages nil)
#+end_src

** Backup

#+begin_src emacs-lisp :tangle init.el
(setq make-backup-files nil)
(setq backup-inhibited nil)
(setq auto-save-default nil)
#+end_src

** Setup El

#+begin_src emacs-lisp :tangle init.el
(require 'setup)

(defmacro -setup (order &rest body)
  "Execute BODY in `setup' declaration after ORDER is finished.
If the :disabled keyword is present in body, the package is completely ignored.
This happens regardless of the value associated with :disabled.
The expansion is a string indicating the package has been disabled."
  (declare (indent 1))
  (if (memq :disabled body)
      (format "%S :disabled by -setup" order)
    (let ((o order))
      (when-let ((ensure (cl-position :ensure body)))
        (setq o (if (null (nth (1+ ensure) body)) nil order)
              body (append (cl-subseq body 0 ensure)
                           (cl-subseq body (+ ensure 2)))))
      `(elpaca ,o (setup
                    ,(if-let (((memq (car-safe order) '(quote \`)))
                              (feature (flatten-tree order)))
                         (cadr feature)
                       (elpaca--first order))
                    ,@body)))))

(setup-define :load-after
  (lambda (&rest features)
    (let ((body `(require ',(setup-get 'feature))))
      (dolist (feature (nreverse features))
        (setq body `(with-eval-after-load ',feature ,body)))
      body))
  :documentation "Load the current feature after FEATURES.")

(setup-define :opt
  (lambda (&rest pairs)
    `(setopt ,@pairs))
  :after-loaded t)

(setup-define :face
    (lambda (face spec) `(custom-set-faces (quote (,face ,spec))))
    :documentation "Customize FACE to SPEC."
    :signature '(face spec ...)
    :debug '(setup)
    :repeatable t
    :after-loaded t)
#+end_src

** OS

;; is-darwin
#+begin_src emacs-lisp :tangle init.el
(defconst is-darwin (string= system-type "darwin"))

;; is-darwin-window
(defconst is-darwin-window (and (string= system-type "darwin")
                                window-system))

;; when-darwin-not-window-system
(defconst is-darwin-not-window (and (string= system-type "darwin")
                                    (not window-system)))
#+end_src

** Performance tips

#+begin_src emacs-lisp :tangle init.el
(setup simple
  (:opt blink-matching-paren nil
        auto-mode-case-fold nil
        vc-handled-backends '(Git)
        bidi-display-reordering 'left-to-right
        bidi-inhibit-bpa t
        cursor-in-non-selected-windows nil
        highlight-nonselected-windows nil
        fast-but-imprecise-scrolling t
        jit-lock-defer-time 0
        ffap-machine-p-known 'reject
        idle-update-delay 1.0
        redisplay-skip-fontification-on-input t
        process-adaptive-read-buffering t)
  (:only-if is-darwin)
  (:opt command-line-ns-option-alist nil))
#+end_src

*** so-long

#+begin_src emacs-lisp :tangle init.el
(setup so-long
  (global-so-long-mode +1))
#+end_src

** Basic behavior

#+begin_src emacs-lisp :tangle init.el
(setq make-backup-files nil)
(setq backup-inhibited nil)
(setq create-lockfiles nil)
(setq auto-save-default nil)
(setq delete-by-moving-to-trash t)
(setq vc-follow-symlinks t)
(setq ring-bell-function 'ignore)
(defalias 'yes-or-no-p 'y-or-n-p)
(setq inhibit-startup-message t)
(setq kill-whole-line t)

(setq-default indent-tabs-mode nil)
#+end_src

*** show-trailing-whitespace

#+begin_src emacs-lisp :tangle init.el
(setq-default show-trailing-whitespace t)

(defun my/disable-trailing-mode-hook ()
  "Disable show tail whitespace."
  (setq show-trailing-whitespace nil))

(defvar my/disable-trailing-modes
  '(eshell-mode
    eww-mode
    term-mode
    special-mode
    coq-goals-mode))

(mapc
 (lambda (mode)
   (add-hook (intern (concat (symbol-name mode) "-hook"))
             'my/disable-trailing-mode-hook))
 my/disable-trailing-modes)
#+end_src

*** blink-cursor-mode

#+begin_src emacs-lisp :tangle init.el
(blink-cursor-mode -1)
#+end_src

*** auto-revert-mode

#+begin_src emacs-lisp :tangle init.el
(setup auto-revert-mode
  (global-auto-revert-mode t))
#+end_src

*** recentf-mode

#+begin_src emacs-lisp :tangle init.el
(setup recentf-mode
  (:opt recentf-max-saved-items 100)
  (recentf-mode +1))
#+end_src

*** savehist-mode

#+begin_src emacs-lisp :tangle init.el
(with-eval-after-load 'savehist-mode
  (savehist-mode +1))
#+end_src

*** delsel

#+begin_src emacs-lisp :tangle init.el
(setup delsel
  (delete-selection-mode +1))
#+end_src

** Scroll

#+begin_src emacs-lisp :tangle init.el
(setup simple
  (setq scroll-margin 0)
  (setq scroll-conservatively 100000)
  (setq scroll-preserve-screen-position t))

(setup pixel-scroll-precision-mode
  (:only-if is-darwin-window)
  (pixel-scroll-precision-mode t))
#+end_src

*** fast-scroll

see: https://github.com/meatcar/emacs.d?tab=readme-ov-file#fast-scroll

#+begin_src emacs-lisp :tangle init.el
(setup fast-scroll
  (:when-loaded
    (fastscroll-config)
    (fastscroll-mode 1)))
#+end_src

** Looks & Feels

#+begin_src emacs-lisp :tangle init.el
(setup display-line-numbers
  (:opt display-line-numbers-grow-only t)
  (:with-mode prog-mode
    (:hook display-line-numbers-mode))
  (:with-mode text-mode
    (:hook display-line-numbers-mode)))
#+end_src

*** Theme

#+begin_src emacs-lisp :tangle init.el
(setup modus-themes
  (:opt modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-region '(bg-only no-extend)
        modus-themes-mixed-fonts t
        modus-themes-subtle-line-numbers t
        modus-themes-org-blocks 'gray-background
        modus-themes-common-palette-overrides
	'(
          (comment yellow-cooler)
          ;; (comment yellow-warmer)
          ;; (string green-cooler)
          (string green-warmer)
          ;; (keyword cyan-cooler)
          ))

  (load-theme 'modus-operandi-tinted t)
  ;; (load-theme 'modus-vivendi-tritanopia t)
  ;; (load-theme 'modus-operandi-deuteranopia t)
  ;; (load-theme 'modus-operandi-tritanopia t)
  )
#+end_src

*** Modeline

#+begin_src emacs-lisp :tangle init.el
(setup moody
  (:opt x-underline-at-decent-line t)

  (moody-replace-mode-line-front-space)
  (moody-replace-mode-line-buffer-identification))
#+end_src

*** mlscroll

#+begin_src emacs-lisp :tangle init.el
(setup mlscroll
  (if (daemonp)
      (add-hook 'server-after-make-frame-hook #'mlscroll-mode)
    (mlscroll-mode 1)))
#+end_src

*** Terminal

#+begin_src emacs-lisp :tangle init.el
(setup
  (:only-if is-darwin-not-window)
  (set-face-attribute 'vertical-border nil :foreground "gray")
  (set-display-table-slot standard-display-table 'vertical-border (make-glyph-code ?\u2502)))

(setup xterm-mouse-mode
  (:only-if is-darwin-not-window)
  (xterm-mouse-mode t))

(setup mouse-wheel-mode
  (:only-if is-darwin-not-window)
  (mouse-wheel-mode t))
#+end_src

*** minions

#+begin_src emacs-lisp :tangle init.el
(setup minions
  (minions-mode))
#+end_src

*** svg-tag-mode

#+begin_src emacs-lisp :tagnle init.el
(setup svg-tag-mode
  (global-svg-tag-mode))
#+end_src

*** keycast

#+begin_src emacs-lisp :tangle init.el
(setup keycast
  (:load-after moody)
  (:require keycast)
  ;; (keycast-tab-bar-mode)
  ;; (keycast-mode-line-mode)

  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-modeline)."
    :global t
    (if keycast-mode
	(add-hook 'pre-command-hook 'keycast--update t)
      (remove-hook 'pre-command-hook 'keycast--update)))

  (add-to-list 'global-mode-string '("" keycast-mode-line))

  (keycast-mode))
#+end_src

** Window

*** ace-window

#+begin_src emacs-lisp :tangle init.el
(setup ace-window
  (:global "M-o" ace-window)
  (:opt aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))
#+end_src


** Languages & Encoding

#+begin_src emacs-lisp :tangle init.el
(setup simple
  (set-language-environment "Japanese")
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (set-file-name-coding-system 'utf-8)
  (set-clipboard-coding-system 'utf-8)
  (set-buffer-file-coding-system 'utf-8))
#+end_src

** Case ignore

#+begin_src emacs-lisp :tangle init.el
(setq read-file-name-completion-ignore-case t)
(setq read-buffer-completion-ignore-case t)
(setq completion-ignore-case t)
#+end_src

** Copy & Pasge

#+begin_src emacs-lisp :tangle init.el
(setup (:only-if is-darwin)
  (defun copy-from-osx ()
    (shell-command-to-string "pbpaste"))

  (defun paste-to-osx (text &optional push)
    (let ((process-connection-type nil))
      (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
        (process-send-string proc text)
        (process-send-eof proc))))

  (setq interprogram-cut-function 'paste-to-osx)
  (setq interprogram-paste-function 'copy-from-osx))
#+end_src

** Undo & Redo

*** vundo

#+begin_src emacs-lisp :tangle init.el
(setup vundo
  (:global "C-x u" vundo))
#+end_src

*** undohist

#+begin_src emacs-lisp :tangle init.el
(setup undohist
  (undohist-initialize))
#+end_src

** Search

*** anzu

#+begin_src emacs-lisp :tangle init.el
(setup anzu
  (:global [remap query-replace] anzu-query-replace
           [remap query-replace-regexp] anzu-query-replace-regex)
  (:opt anzu-replace-threshold 1000
        anzu-search-threshold 1000)
  (:with-mode emacs-startup
    (:hook global-anzu-mode))
  (copy-face 'mode-line 'anzu-mode-line))
#+end_src

*** ripgrep

#+begin_src emacs-lisp :tangle init.el
(setup ripgrep)
#+end_src

** dired

#+begin_src emacs-lisp :tangle init.el
(setup dired
  (:opt dired-dwim-target t
        dired-do-revert-buffer t
        dired-recursive-copies 'always
        dired-isearch-filenames t)

  (require 'dired-x))
#+end_src

*** nerd-icons-dired

#+begin_src emacs-lisp :tangle init.el
(setup nerd-icons-dired
  (:with-mode dired-mode
    (:hook nerd-icons-dired-mode))
  (:require nerd-icons)

  (add-to-list 'nerd-icons-extension-icon-alist
               '("mdx" nerd-icons-octicon "nf-oct-markdown" :face nerd-icons-lblue)))
#+end_src

** key

#+begin_src emacs-lisp :tangle init.el
;; (setup devil
;;   (global-devil-mode))
#+end_src

*** which-key

#+begin_src emacs-lisp :tangle init.el
(setup which-key
  (which-key-mode))
#+end_src

*** hydra

#+begin_src emacs-lisp :tangle init.el
(setup hydra)
#+end_src

**** hydra-posframe

#+begin_src emacs-lisp :tangle init.el
(setup hydra-posframe
  (:opt hydra-posframe-poshandler 'posframe-poshandler-window-bottom-center)
  (add-hook 'after-init-hook 'hydra-posframe-mode))
#+end_src

** Parens

*** electric-pair

#+begin_src emacs-lisp :tangle init.el
(setup electric-pair
  (electric-pair-mode 1))
#+end_src

*** rainbow-delimiters

#+begin_src emacs-lisp :tangle init.el
(setup rainbow-delimiters
  (:with-mode prog-mode
    (:hook rainbow-delimiters-mode)))
#+end_src

** Flymake


#+begin_src emacs-lisp :tangle init.el
(setup flymake)
#+end_src

*** flymake-popon

#+begin_src emacs-lisp :tangle init.el
(setup flymake-popon
  (global-flymake-popon-mode))
#+end_src


** Completion

*** corfu

#+begin_src emacs-lisp :tangle init.el
(setup corfu
  (:opt corfu-auto t
        corfu-auto-delay 0.5
        corfu-popupifo-delay 0.5
        corfu-quit-no-match t
        corfu-auto-prefix 1
        tab-always-indent 'complete
        text-mode-ispell-word-completion nil)
  ;; (:with-map corfu-mode-map
  ;;   (:bind
  ;;    "SPC" corfu-insert-separator))
  (global-corfu-mode))
#+end_src

**** corfu-terminal

#+begin_src emacs-lisp :tangle init.el
(setup corfu-terminal
  (:load-after corfu)
  (:when-loaded
    (corfu-terminal-mode +1)))
#+end_src

**** corfu-prescient

#+begin_src emacs-lisp :tangle init.el
(setup corfu-prescient
  (:opt corfu-prescient-enable-filtering nil
        prescient-aggressive-file-save t)
  (require 'prescient)
  (prescient-persist-mode +1)
  (corfu-prescient-mode +1))
#+end_src

**** nerd-icons-corfu

#+begin_src emacs-lisp :tangle init.el
(setup nerd-icons-corfu
  (:load-after corfu)
  (:when-loaded
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter)))
#+end_src

*** vertico

#+begin_src emacs-lisp :tangle init.el
(setup vertico
  (:with-map vertico-map
    (:bind "C-r" vertico-previous
           "C-s" vertico-next))
  (:opt vertico-count 12
        vertico-cycle t)
  (:opt marginalia-mode t)
  (defvar +vertico-current-arrow t)

  (vertico-mode)

  ;; vertico-directory
  (:with-map vertico-map
    (:bind "C-l" vertico-directory-up
           "DEL" vertico-directory-delete-char)))
#+end_src

**** vertico-prescient

#+begin_src emacs-lisp :tangle init.el
(setup vertico-prescient
  (:load-after prescient)
  (:opt vertico-prescient-enable-filtering nil)
  (vertico-prescient-mode +1))
#+end_src

*** consult

#+begin_src emacs-lisp :tangle init.el
(setup consult
  (:opt consult-preview-raw-size 1024000
        consult-preview-max-size 1024000
        consult-preview-key 'any
        xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)
  (:global
   "C-x b" consult-buffer

   "M-y" consult-yank-pop

   "M-g f" consult-flymake
   "M-g o" consult-outline
   "M-g i" consult-imenu

   "M-s @" consult-line-at
   "M-s s" consult-line
   "M-s f" consult-find
   "M-s r" consult-ripgrep
   "M-s F" consult-focus-lines)
  (:when-loaded
    (consult-customize
     consult-buffer
     consult-recent-file
     consult-xref
     :preview-key '(:debounce 0.4 any)))

  (defun consult-line-at (&optional at-point)
    "Consult-line uses things-at-point if set C-u prefix."
    (interactive "P")
    (if at-point
        (consult-line (thing-at-point 'symbol))
      (consult-line))))
#+end_src

**** consult-ghq

#+begin_src emacs-lisp :tangle init.el
(setup consult-ghq
  (:global
   "C-c C-g" consult-ghq-switch-project))
#+end_src

**** consult-projectile

#+begin_src emacs-lisp :tangle init.el
(setup consult-projectile
  (:load-after projectile)
  (:when-loaded
    (advice-add 'projectile-switch-to-buffer :override #'consult-projectile-switch-to-buffer)
    (advice-add 'projectile-switch-to-buffer-other-window :override #'consult-projectile-switch-to-buffer-other-window)
    (advice-add 'projectile-switch-to-buffer-other-frame :override #'consult-projectile-switch-to-buffer-other-frame)
    (advice-add 'projectile-find-dir :override #'consult-projectile-find-dir)
    (advice-add 'projectile-find-file :override #'consult-projectile-find-file)
    (advice-add 'projectile-find-file-other-window :override #'consult-projectile-find-file-other-window)
    (advice-add 'projectile-find-file-other-frame :override #'consult-projectile-find-file-other-frame)
    (advice-add 'projectile-recentf :override #'consult-projectile-recentf)
    (advice-add 'projectile-switch-project :override #'consult-projectile-switch-project)
    (advice-add 'projectile-ripgrep :override #'consult-ripgrep)))
#+end_src

*** orderless

#+begin_src emacs-lisp :tangle init.el
(setup orderless
  (:opt completion-style '(orderless basic)
    	completion-category-overrides '((file (styles basic partial-completion)))))

(setup minibuffer
  (:when-loaded
    (:opt completion-styles '(orderless)
          completion-category-overrides '((file (styles basic partial-completion))))
    (add-to-list 'completion-styles-alist '(orderless orderless-try-completion orderless-all-completions
                                                      "Completion of multiple components, in any order."))))
#+end_src

*** cape

#+begin_src emacs-lisp :tangle init.el
(setup cape
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-elisp-block)
  (add-to-list 'completion-at-point-functions #'cape-history))
#+end_src

*** marginalia

#+begin_src emacs-lisp :tangle init.el
(setup marginalia
  (marginalia-mode t))
#+end_src

*** nerd-icons-completion

#+begin_src emacs-lisp :tangle init.el
(setup nerd-icons-completion
  (:load-after marginalia)
  (:when-loaded
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup)
    (nerd-icons-completion-mode)))
#+end_src

*** prescient

#+begin_src emacs-lisp :tangle init.el
(setup prescient
  (:opt prescient-aggressive-file-save t)
  (:require prescient)
  (prescient-persist-mode +1))
#+end_src

** embark

#+begin_src emacs-lisp :tangle init.el
(setup embark
  (:global
   "C-." embark-act)
  ;; (:opt embark-indicators
  ;;       '(embark-highlight-indicator
  ;;         embark-isearch-highlight-indicator
  ;;         embark-minimal-indicator))

  (add-to-list 'display-buffer-alist
               '("\\*Embark Actions\\*"
                 (display-buffer-in-side-window)
                 (side . bottom)
                 (slot . 0)
                 (window-height . 0.5)))
  )
#+end_src

*** embark-consult

#+begin_src emacs-lisp :tangle init.el
(setup embark-consult
  (:load-after consult embark)
  (:with-mode consult-preview-at-point-mode
    (:hook embark-collect-mode)))
#+end_src

** IME

#+begin_src emacs-lisp :tangle init.el
(setup ddskk
  (:global
   "C-x j" skk-mode)
  (:opt skk-preload t
        default-input-method "japanese-skk"
        skk-byte-compile-init-file t
        skk-isearch-mode-enable 'always
        skk-egg-like-newline t
        skk-show-annotation nil
        skk-auto-insert-paren t)

  (defun my/enable-skk-latin-mode ()
    (skk-latin-mode 1))
  (add-hook 'find-file-hook #'my/enable-skk-latin-mode))
#+end_src

*** ddskk-posframe

#+begin_src emacs-lisp :tangle init.el
(setup ddskk-posframe
  (:load-after ddskk)
  (:only-if is-darwin-window)
  (ddskk-posframe-mode t))
#+end_src

** Move

*** avy

#+begin_src emacs-lisp :tangle init.el
(setup avy
  (:global "C-:" 'avy-goto-char
           "C-'" 'avy-goto-char-2))
#+end_src

** Curosr

*** multiple-cursors

#+begin_src emacs-lisp :tangle init.el
(setup multiple-cursors
  (:load-after hydra)
  (:global "C-*" multiple-cursors/body)

  (defvar multiple-cursors--title "Multiple cursors")
  (pretty-hydra-define multiple-cursors (:foreign-keys warn :title multiple-cursors--title :quit-key "q")
    ("Mark"
     (("n" mc/mark-next-like-this "next")
      ("N" mc/unmark-next-like-this "unmark next")
      ("p" mc/mark-previous-like-this "previous")
      ("P" mc/unmark-previous-like-this "unmark previous")
      ("e" mc/mark-more-like-this-extended "extend"))
     "Many"
     (("a" mc/mark-all-in-region "all in region" :exit t)
      ("*" mc/mark-all-like-this "all" :exit t)))))
#+end_src

** Highlight

*** highlight-symbol

#+begin_src emacs-lisp :tangle init.el
(setup highlight-symbol
  (:with-mode prog-mode
    (:hook highlight-symbol-mode)))
#+end_src

*** volatile-highlights

#+begin_src emacs-lisp :tangle init.el
(setup volatile-highlights
  (:when-loaded
    (set-face-attribute
     'vhl/default-face nil :foreground "#FF3333" :background "#FFCDCD")

    (vhl/define-extension 'undo-tree 'undo-tree-yank 'undo-tree-mode)
    (vhl/install-extension 'undo-tree))

  (volatile-highlights-mode t))
#+end_src

*** dimmer

#+begin_src emacs-lisp :tangle init.el
(-setup dimmer
  :disabled
  (:opt dimmer-fraction 0.05
        dimmer-adjustment-mode :background
        dimmer-use-colorspace :rgb
        dimmer-watch-frame-focus-events nil
        dimmer-exclusion-regexp-list '(".*Minibuf.*"
                                       ".*which-key.*"
                                       ".*NeoTree.*"
                                       ".*Messages.*"
                                       ".*Async.*"
                                       ".*Warnings.*"
                                       ".*LV.*"
                                       ".*Ilist.*"
))
  (:require dimmer)

  ;; corfu に対応する。
  ;; https://github.com/gonewest818/dimmer.el/issues/62
  (defun advise-dimmer-config-change-handler ()
    "Advise to only force process if no predicate is truthy."
    (let ((ignore (cl-some (lambda (f) (and (fboundp f) (funcall f)))
                           dimmer-prevent-dimming-predicates)))
      (unless ignore
        (when (fboundp 'dimmer-process-all)
          (dimmer-process-all t)))))

  (defun corfu-frame-p ()
    "Check if the buffer is a corfu frame buffer."
    (string-match-p "\\` \\*corfu" (buffer-name)))

  (defun dimmer-configure-corfu ()
    "Convenience settings for corfu users."
    (add-to-list
     'dimmer-prevent-dimming-predicates
     #'corfu-frame-p))

  (advice-add
   'dimmer-config-change-handler
   :override 'advise-dimmer-config-change-handler)

  ;; https://github.com/gonewest818/dimmer.el/issues/49#issuecomment-804500887
  (defun dimmer-lsp-ui-doc-p ()
    (string-prefix-p " *lsp-ui-doc-" (buffer-name)))
  (add-to-list 'dimmer-prevent-dimming-predicates #'dimmer-lsp-ui-doc-p)

  (defun advices/dimmer-config-change-handler ()
    (dimmer--dbg-buffers 1 "dimmer-config-change-handler")
    (let ((ignore (cl-some (lambda (f) (and (fboundp f) (funcall f)))
                         dimmer-prevent-dimming-predicates)))
      (dimmer-process-all (not ignore))))
  (advice-add 'dimmer-config-change-handler :override #'advices/dimmer-config-change-handler)

  (dimmer-configure-corfu)

  (dimmer-configure-which-key)
  (dimmer-configure-magit)
  (dimmer-configure-org)
  (dimmer-configure-posframe)

  (dimmer-mode t))
#+end_src

** Project

*** projectile

#+begin_src emacs-lisp :tangle init.el
(setup projectile
  (:opt projectile-generic-dommand "fd . -0 --type f --color=never")
  (:with-map projectile-mode-map
    (:bind
      "C-c p" projectile-command-map))
  (projectile-mode +1))
#+end_src

*** treemacs

#+begin_src emacs-lisp :tangle init.el
(setup treemacs
  (:global "C-\\" treemacs)
  (:opt treemacs-user-mode-line-format 'none)
  (:when-loaded
    (treemacs-fringe-indicator-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-git-commit-diff-mode t)
    (treemacs-git-mode 'deferred)))
#+end_src

**** treemacs-nerd-icons

#+begin_src emacs-lisp :tangle init.el
(setup treemacs-nerd-icons
  (:load-after treemacs)
  (:require treemacs-nerd-icons)
  (:when-loaded (treemacs-load-theme "nerd-icons")))
#+end_src

**** treemacs-projectile

#+begin_src emacs-lisp :tangle init.el
(setup treemacs-projectile
  (:load-after treemacs projectile)
  (treemacs-project-follow-mode t))
#+end_src

**** treemacs-magit

#+begin_src emacs-lisp :tangle init.el
(setup treemacs-magit
  (:load-after treemacs))
#+end_src

**** treemacs-tab-bar

#+begin_src emacs-lisp :tangle init.el
(setup treemacs-tab-bar
  (:load-after treemacs)
  (:opt treemacs-set-scope-type 'Tabs))
#+end_src

** Git

*** magit

#+begin_src emacs-lisp :tangle init.el
#+end_src

*** git-modes

#+begin_src emacs-lisp :tangle init.el
(setup git-modes)
#+end_src

*** git-gutter

#+begin_src emacs-lisp :tangle init.el
(setup git-gutter
  (:when-loaded
    (custom-set-variables
     '(git-gutter:modified-sign " ")
     '(git-gutter:added-sign " ")
     '(git-gutter:deleted-sign " "))

    (set-face-background 'git-gutter:modified "purple")
    (set-face-background 'git-gutter:added "green")
    (set-face-background 'git-gutter:deleted "red"))

  (global-git-gutter-mode t))
#+end_src

*** blamer

#+begin_src emacs-lisp :tangle init.el
(setup blamer
  (:face blamer-face ((t :foreground "#7a88cf"
                         :background nil
                         :height 120
                         :italic t))))
#+end_src

*** git-timemachine


#+begin_src emacs-lisp :tangle init.el
(setup git-timemachine)
#+end_src

*** fill-column-indicator

#+begin_src emacs-lisp :tangle init.el
(setup fill-column-indicator
  (:with-mode git-commit-mode
    (:hook fci-mode)))
#+end_src

** Documents

*** org-mode

#+begin_src emacs-lisp :tangle init.el
(setup org
  (:opt
   org-startup-indented t
   org-latex-create-formula-image-program 'dvisvgm

   org-log-done 'time
   org-src-fontify-natively t
   org-src-preserve-indentation t
   org-src-tab-acts-natively t

   system-time-locate nil
   org-startup-with-inline-images t
   org-ellipsis " ▼"
   org-hide-emphasis-markers t
   org-fontify-quote-and-verse-blocks t
   org-use-speed-commands t
   org-return-follows-link t

   org-special-ctrl-a/e t
   org-auto-align-tags nil
   org-tags-column 0

   org-display-custom-times t
   org-image-actual-width nil

   org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "WIP(p)" "REMIND(r)" "SOMEDAY(s)" "|" "DONE(d)"))
   org-enforce-todo-dependencies t
   org-hierarchical-todo-statistics nil

   org-emphasis-regexp-components '("-[:space:]('\"{[:nonascii:]"
                                    "-[:space:].,:!?;'\")}\\[[:nonascii:]"
                                    "[:space:]"
                                    "."
                                    1)
   org-match-substring-regexp
        (concat
         "\\([0-9a-zA-Zα-γΑ-Ω]\\)\\([_^]\\)\\("
         "\\(?:" (org-create-multibrace-regexp "{" "}" org-match-sexp-depth) "\\)"
         "\\|"
         "\\(?:" (org-create-multibrace-regexp "(" ")" org-match-sexp-depth) "\\)"
         "\\|"
         "\\(?:\\*\\|[+-]?[[:alnum:].,\\]*[[:alnum:]]\\)\\)")

   ;; org-agenda
   org-agenda-span 'day
   org-agenda-tags-column 0
   ;; org-agenda-block-separator ?─
   org-agenda-time-grid '((daily today require-timed)
                          (800 1000 1200 1400 1600 1800 2000)
                          " ┄┄┄┄┄ " "┄┄┄┄┄┄┄┄┄┄┄┄┄┄┄")
   org-agenda-current-time-string "⭠ now ─────────────────────────────────────────────────"

  ;; see: https://misohena.jp/blog/2021-08-29-colorize-saturday-and-japanese-holidays-in-org-agenda.html
   org-agenda-day-face-function (lambda (date)
                                  (let ((face (cond
                                               ;; 土曜日
                                               ((= (calendar-day-of-week date) 6)
                                                '(:inherit org-agenda-date :foreground "#0df"))
                                               ;; 日曜日か日本の祝日
                                               ((or (= (calendar-day-of-week date) 0)
                                                    (let ((calendar-holidays japanese-holidays))
                                                      (calendar-check-holidays date)))
                                                'org-agenda-date-weekend)
                                               ;; 普通の日
                                               (t 'org-agenda-date))))
                                    ;; 今日は色を反転
                                    (if (org-agenda-today-p date) (list :inherit face :inverse-video t) face)))
   org-time-stamp-custom-formats '("<%Y年%m月%d日(%a)>" . "<%Y年%m月%d日(%a)%H時%M分>"))

  (:when-loaded
   ;; see: https://github.com/lijigang/emacs.d/blob/main/readme.org
   (require 'org)
   (org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)
   (org-element-update-syntax)

   (defun org-babel-execute:jshell (body params)
     "Execute a block of jshell code snippets or commands with org-babel"
     (message "Executing jshell snippets")
     (org-babel-eval "jshell -q" (concat body "\n/exit")))
   (add-to-list 'org-src-lang-modes '("jshell" . "java")))
)
#+end_src

**** org-modern

#+begin_src emacs-lisp :tangle init.el
(setup org-modern
  (:with-mode org-mode
    (:hook org-modern-mode))
  (:opt ;; org-modern-hide-stars 'leading
        org-modern-table nil
        org-modern-hide-stars nil
        org-modern-timestamp '(" %Y年%m月%d日(%a) " . " %H時%M分 ")
        org-modern-star 'replace
        org-modern-replace-stars
        (list #("󰎥" 0 1 (face (:family "Symbols Nerd Font Mono" :height 1.0) font-lock-face (:family "Symbols Nerd Font Mono" :height 1.0) display (raise 0.0) rear-nonsticky t))
              #("󰎨" 0 1 (face (:family "Symbols Nerd Font Mono" :height 1.0) font-lock-face (:family "Symbols Nerd Font Mono" :height 1.0) display (raise 0.0) rear-nonsticky t))
              #("󰎫" 0 1 (face (:family "Symbols Nerd Font Mono" :height 1.0) font-lock-face (:family "Symbols Nerd Font Mono" :height 1.0) display (raise 0.0) rear-nonsticky t))
              #("󰎲" 0 1 (face (:family "Symbols Nerd Font Mono" :height 1.0) font-lock-face (:family "Symbols Nerd Font Mono" :height 1.0) display (raise 0.0) rear-nonsticky t))
              #("󰎯" 0 1 (face (:family "Symbols Nerd Font Mono" :height 1.0) font-lock-face (:family "Symbols Nerd Font Mono" :height 1.0) display (raise 0.0) rear-nonsticky t))
              #("󰎴" 0 1 (face (:family "Symbols Nerd Font Mono" :height 1.0) font-lock-face (:family "Symbols Nerd Font Mono" :height 1.0) display (raise 0.0) rear-nonsticky t))
              #("󰎷" 0 1 (face (:family "Symbols Nerd Font Mono" :height 1.0) font-lock-face (:family "Symbols Nerd Font Mono" :height 1.0) display (raise 0.0) rear-nonsticky t))
              ))
  (let ((comment-color (face-attribute 'font-lock-comment-face :foreground)))
    (custom-theme-set-faces
     'user
     `(org-quote ((t (:inherit org-block :slant italic :foreground ,comment-color))))))

  (:when-loaded
    (set-face-attribute 'org-table nil :inherit 'fixed-pitch))

  (setq org-ditaa-jar-path "~/.nix-profile/lib/ditaa.jar")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((ditaa . t))))
#+end_src

**** org-modern-indent

#+begin_src emacs-lisp :tangle init.el
(setup org-modern-indent
  (:with-mode org-mode
    (:hook org-modern-indent-mode)))
#+end_src

**** org-roam

#+begin_src emacs-lisp :tangle init.el
(setup org-roam
  (:opt org-roam-directory (file-truename "~/.org-roam"))

  (org-roam-db-autosync-mode))
#+end_src

*** markdown-mode

#+begin_src emacs-lisp :tangle init.el
(setup markdown-mode
  (:file-match "\\.mdx\\'")
  (:opt markdown-fontify-code-blocks-natively t))
#+end_src

** eldoc


#+begin_src emacs-lisp :tangle init.el
(setup eldoc
  (:opt eldoc-echo-area-use-multiline-p nil)
  (:global
   ;; "C-c q" toggle-eldoc-doc-buffer
   "C-c q" eldoc-box-hover-at-point-mode
   )
  (defun get-buffer-by-regex (regex)
    (car (seq-filter (lambda (buf)
                       (string-match-p regex (buffer-name buf)))
                     (buffer-list))))

  (seq-filter (lambda (buf)
                (string-match-p "^*scratch" (buffer-name buf)))
              (buffer-list))

  (setq eldoc-buffer-regex "^\\*eldoc\\( for [^*]+\\)\?\\*")

  (add-to-list 'display-buffer-alist
               `(,eldoc-buffer-regex
                 display-buffer-at-bottom
                 (window-height . 20)))

  (defun my/eldoc-doc-buffer-active ()
    (let* ((buffer (get-buffer-by-regex eldoc-buffer-regex))
           (window (get-buffer-window buffer)))
      (when window
        (select-window window))))
  (add-hook 'window-configuration-change-hook 'my/eldoc-doc-buffer-active)

  (defun toggle-eldoc-doc-buffer (&optional interactive)
    "Toggle the display of the eldoc documentation buffer."
    (interactive '(t))
    (let ((buffer (get-buffer-by-regex eldoc-buffer-regex)))
      (if (and buffer (get-buffer-window buffer))
          (delete-window (get-buffer-window buffer))
        (eldoc-print-current-symbol-info interactive)))))
#+end_src

** Programming

*** eglot

#+begin_src emacs-lisp :tangle init.el
(setup eglot-booster
  (:load-after eglot)
  (eglot-booster-mode))

(setup eglot-signature-eldoc-talkative
  (:load-after eglot)
  (require 'eglot-signature-eldoc-talkative)
  (advice-add #'eglot-signature-eldoc-function
              :override #'eglot-signature-eldoc-talkative))

(setup eglot-x
  (:load-after eglot)
  (:with-map eglot-mode-map
    (:bind "s-." eglot-x-find-refs))
  (require 'eglot-x)
  (eglot-x-setup))

(setup consult-eglot
  (:load-after eglot)
  (:with-map eglot-mode-map
    (:bind "C-c s" consult-eglot-symbols)))
#+end_src

*** Tree Sitter

#+begin_src emacs-lisp :tangle init.el
(setup treesit-auto
  (:opt treesit-auto-install t)
  (:require treesit-auto)
  (treesit-auto-add-to-auto-mode-alist 'all)
  (global-treesit-auto-mode))
#+end_src

*** ligature

#+begin_src emacs-lisp :tangle init.el
(setup ligature
  (setq ligature-symbols '("-->" "//" "/**" "/*" "*/" "<!--" ":=" "->>" "<<-" "->" "<-"
                           "<=>" "==" "!=" "<=" ">=" "=:=" "!==" "&&" "||" "..." ".."
                           "|||" "///" "&&&" "===" "++" "--" "=>" "|>" "<|" "||>" "<||"
                           "|||>" "<|||" ">>" "<<" "::=" "|]" "[|" "{|" "|}"
                           "[<" ">]" ":?>" ":?" "/=" "[||]" "!!" "?:" "?." "::"
                           "+++" "??" "###" "##" ":::" "####" ".?" "?=" "=!=" "<|>"
                           "<:" ":<" ":>" ">:" "<>" "***" ";;" "/==" ".=" ".-" "__"
                           "=/=" "<-<" "<<<" ">>>" "<=<" "<<=" "<==" "<==>" "==>" "=>>"
                           ">=>" ">>=" ">>-" ">-" "<~>" "-<" "-<<" "=<<" "---" "<-|"
                           "<=|" "/\\" "\\/" "|=>" "|~>" "<~~" "<~" "~~" "~~>" "~>"
                           "<$>" "<$" "$>" "<+>" "<+" "+>" "<*>" "<*" "*>" "</>" "</" "/>"
                           "<->" "..<" "~=" "~-" "-~" "~@" "^=" "-|" "_|_" "|-" "||-"
                           "|=" "||=" "#{" "#[" "]#" "#(" "#?" "#_" "#_(" "#:" "#!" "#="
                           "&="))

  (ligature-set-ligatures 't '("www"))
  (ligature-set-ligatures 'prog-mode ligature-symbols)
  (ligature-set-ligatures 'coq-goals-mode ligature-symbols)

  (global-ligature-mode t))
#+end_src

*** editorconfig

#+begin_src emacs-lisp :tangle init.el
(setup editorconfig
  (editorconfig-mode))
#+end_src

*** rainbow-mode

#+begin_src emacs-lisp :tangle init.el
(setup rainbow-mode
  (:with-mode prog-mode
    (:hook rainbow-mode)))
#+end_src

*** dap-mode

#+begin_src emacs-lisp :tangle init.el
(setup dap-mode
  (:with-mode scala-mode
    (:hook dap-mode
           dap-ui-mode))
  (dap-auto-configure-mode))
#+end_src

*** Emacs Lisp

**** highlight-defined

#+begin_src emacs-lisp :tangle init.el
(setup highlight-defined
  (:with-mode emacs-lisp-mode
    (:hook highlight-defined-mode)))
#+end_src

**** highlight-quoted

#+begin_src emacs-lisp :tangle init.el
(setup highlight-quoted
  (:with-mode emacs-lisp-mode
    (:hook highlight-quoted-mode)))
#+end_src

*** Docker

**** dockerfile-mode

#+begin_src emacs-lisp :tangle init.el
(setup dockerfile-mode)
#+end_src

*** YAML

#+begin_src emacs-lisp :tangle init.el
(setup yaml-mode)
#+end_src

*** Groovy

#+begin_src emacs-lisp :tangle init.el
(setup groovy-mode
  (:with-mode groovy-mode
    (:hook (lambda ()
             (setq indent-tabs-mode t)
             (setq tab-width 4)))))
#+end_src

*** Kotlin

#+begin_src emacs-lisp :tangle init.el
(setup kotlin-mode)
#+end_src

*** SCSS

#+begin_src emacs-lisp :tangle init.el
(setup scss-mode
  (:opt css-indent-offset 2))
#+end_src

*** Scala

**** scala-mode

#+begin_src emacs-lisp :tangle init.el
(setup scala-mode)
#+end_src

**** sbt-mode

#+begin_src emacs-lisp :tangle init.el
(setup sbt-mode
  (:opt sbt:program-options '("-Dsbt.supershell=false"))
  ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
  ;; allows using SPACE when in the minibuffer
  (substitute-key-definition
   'minibuffer-complete-word
   'self-insert-command
   minibuffer-local-completion-map))
#+end_src

*** Golang

#+begin_src emacs-lisp :tangle init.el
(setup go-mode
  (:with-mode go-mode
    (:hook (lambda () (add-hook 'before-save-hook 'gofmt nil t))))
  (:opt gofmt-command "gofmt"))
#+end_src

*** TypeScript

#+begin_src emacs-lisp :tangle init.el
(setup typescript-ts-mode
  (:file-match "\\.m?ts\\'")
  (:opt typescript-indent-level 2
        typescript-tsx-indent-offset 2))

(setup coverlay)

(setup css-in-js-mode)

(setup origami)

(setup tsx-mode
  (:load-after coverlay css-in-js-mode origami)
  (:file-match "\\.[jt]s[x]?\\'"))
#+end_src

*** Coq

#+begin_src emacs-lisp :tangle init.el
(setup proof-general
  (setq coq-prettify-symbols '(("forall" . "∀")
                               ;; ("->"     . "→")
                               ("exists" . "∃")
                               ;; ("=>"     . "⇒")
                               ("False"  . "⊥")
                               ("True"   . "⊤")
                               ("~"      . "¬")
                               ("~~"     . "¬¬")
                               ("~~~"    . "¬¬¬")))
  (:with-mode coq-mode
    (:hook (lambda ()
             (setq prettify-symbols-alist coq-prettify-symbols)
             (prettify-symbols-mode 1))))
  (:with-mode coq-goals-mode
    (:hook (lambda ()
             (setq prettify-symbols-alist coq-prettify-symbols)
             (prettify-symbols-mode 1)))))
#+end_src

*** Astro

#+begin_src emacs-lisp :tangle init.el
(setup web-mode
  (define-derived-mode astro-mode web-mode "astro")
  (setq auto-mode-alist
        (append '((".*\\.astro\\'" . astro-mode))
                auto-mode-alist)))
#+end_src

*** nginx-mode

#+begin_src emacs-lisp :tangle init.el
(setup nginx-mode)
#+end_src

** AI

*** copilot

#+begin_src emacs-lisp :tangle init.el
(setup copilot
  (:with-map copilot-completion-map
    (:bind "<tab>" copilot-accept-completion)
    (:bind "TAB" copilot-accept-completion)))
#+end_src

*** ellama

#+begin_src emacs-lisp :tangle init.el
(setup ellama
  (:opt ellama-language "Japanese"
        ellama-naming-scheme 'ellama-generate-name-by-llm
        ellama-provider (make-llm-ollama
                         :chat-model "deepseek-r1:70b"
                         :embedding-model "deepseek-r1:70b")))
#+end_src

*** gptel

#+begin_src emacs-lisp :tangle init.el
(setup gptel
  (add-hook 'gptel-post-stream-hook 'gptel-auto-scroll)
  (add-hook 'gptel-post-response-functions 'gptel-end-of-response)

  (setq
   gptel-model 'qwq
   gptel-backend (gptel-make-ollama "Ollama"
                                    :host "localhost:11434"
                                    :stream t
                                    :models '(gemma3:27b gemma3:12b qwq))))
#+end_src

*** Aidermacs

#+begin_src emacs-lisp :tangle init.el
(setup aidermacs
  (:bind "C-c a" aidermacs-transient-menu))
#+end_src

** System

*** Window

#+begin_src emacs-lisp :tangle init.el
(setup simple
  (:only-if is-darwin-window)
  (add-hook 'window-setup-hook
            (lambda ()
              (set-frame-parameter nil 'fullscreen 'fullboth))))
#+end_src

*** Path


#+begin_src emacs-lisp :tangle init.el
(setup exec-path-from-shell
  (:opt exec-path-from-shell-arguments (quote ("-l")))
  (:require exec-path-from-shell)
  (setenv "PATH" (concat (getenv "PATH") ":~/.volta/bin"))
  (dolist (var '("SSH_AUTH_SOCK" "SSH_AGENT_PID" "GPG_AGENT_INFO" "LANG" "LC_CTYPE" "NIX_SSL_CERT_FILE" "NIX_PATH" "LSP_USE_PLISTS"))
    (add-to-list 'exec-path-from-shell-variables var))

  (exec-path-from-shell-initialize))
#+end_src

** Finalization

*** Garbage Collection

GC が利用できるメモリの上限を無制限から戻す。

#+begin_src emacs-lisp :tangle init.el
(setq gc-cons-threshold 100 * 1024 * 1024) ;; 100 mb
#+end_src
